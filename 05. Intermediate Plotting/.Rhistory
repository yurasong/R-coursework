sep='')
write.csv(gene.cluster.list[[cluster]], row.names=F, file=cluster.fname)
})
}
write.csv(gene.tab, row.names=F,
file=paste(fname.root, '.R', i, '.gene_name.csv', sep=''))
}
setwd("/media/audrey/Group Project 2019/Ievgenia ARID1A/Sequencing data/ATAC-seq new script/ngsplot - peak enrichment/hetero/with merged peaks")
rm(list=ls())
require(tools)
fname <- "batch2017_het_peak.zip"
require(tools)
fname.ext <- file_ext(fname)
fname.root <- file_path_sans_ext(fname)
if(fname.ext == "zip"){
heatmap.dat <- file.path(fname.root, 'heatmap.RData')
load(unz(fname, heatmap.dat))
} else if (fname.ext == "RData") {
load(fname)
} else { # assume zip file missing .zip suffix. maintains compatibility
heatmap.dat <- file.path(fname, 'heatmap.RData')
load(unz(paste(fname, "zip", sep='.'), heatmap.dat))
}
###Step through each gene list
for(i in 1:length(go.list[[1]])){
split.gname.list <- strsplit(go.list[[1]][[i]], ':')
gene.tab <- data.frame(do.call(rbind, split.gname.list))
colnames(gene.tab) <- c("Gene", "Transcript")
if(!is.na(go.list[[2]][i])) { # with cluster info.
gene.tab <- data.frame(gene.tab, Cluster=go.list[[2]][[i]])
gene.cluster.list <- with(gene.tab, split(gene.tab, Cluster, T))
dumb <- sapply(names(gene.cluster.list), function(cluster) {
cluster.fname <- paste(fname.root, '.R', i, '.C', cluster, '.csv',
sep='')
write.csv(gene.cluster.list[[cluster]], row.names=F, file=cluster.fname)
})
}
write.csv(gene.tab, row.names=F,
file=paste(fname.root, '.R', i, '.gene_name.csv', sep=''))
}
fname <- "batch2017_het_peak_km.zip"
fname.ext <- file_ext(fname)
fname.root <- file_path_sans_ext(fname)
if(fname.ext == "zip"){
heatmap.dat <- file.path(fname.root, 'heatmap.RData')
load(unz(fname, heatmap.dat))
} else if (fname.ext == "RData") {
load(fname)
} else { # assume zip file missing .zip suffix. maintains compatibility
heatmap.dat <- file.path(fname, 'heatmap.RData')
load(unz(paste(fname, "zip", sep='.'), heatmap.dat))
}
###Step through each gene list
for(i in 1:length(go.list[[1]])){
split.gname.list <- strsplit(go.list[[1]][[i]], ':')
gene.tab <- data.frame(do.call(rbind, split.gname.list))
colnames(gene.tab) <- c("Gene", "Transcript")
if(!is.na(go.list[[2]][i])) { # with cluster info.
gene.tab <- data.frame(gene.tab, Cluster=go.list[[2]][[i]])
gene.cluster.list <- with(gene.tab, split(gene.tab, Cluster, T))
dumb <- sapply(names(gene.cluster.list), function(cluster) {
cluster.fname <- paste(fname.root, '.R', i, '.C', cluster, '.csv',
sep='')
write.csv(gene.cluster.list[[cluster]], row.names=F, file=cluster.fname)
})
}
write.csv(gene.tab, row.names=F,
file=paste(fname.root, '.R', i, '.gene_name.csv', sep=''))
}
setwd("/media/audrey/Group Project 2019/Ievgenia ARID1A/Sequencing data/ATAC-seq new script/ngsplot - peak enrichment/control/whole genome region")
fname <- "control_km.zip"
require(tools)
fname.ext <- file_ext(fname)
fname.root <- file_path_sans_ext(fname)
if(fname.ext == "zip"){
heatmap.dat <- file.path(fname.root, 'heatmap.RData')
load(unz(fname, heatmap.dat))
} else if (fname.ext == "RData") {
load(fname)
} else { # assume zip file missing .zip suffix. maintains compatibility
heatmap.dat <- file.path(fname, 'heatmap.RData')
load(unz(paste(fname, "zip", sep='.'), heatmap.dat))
}
###Step through each gene list
for(i in 1:length(go.list[[1]])){
split.gname.list <- strsplit(go.list[[1]][[i]], ':')
gene.tab <- data.frame(do.call(rbind, split.gname.list))
colnames(gene.tab) <- c("Gene", "Transcript")
if(!is.na(go.list[[2]][i])) { # with cluster info.
gene.tab <- data.frame(gene.tab, Cluster=go.list[[2]][[i]])
gene.cluster.list <- with(gene.tab, split(gene.tab, Cluster, T))
dumb <- sapply(names(gene.cluster.list), function(cluster) {
cluster.fname <- paste(fname.root, '.R', i, '.C', cluster, '.csv',
sep='')
write.csv(gene.cluster.list[[cluster]], row.names=F, file=cluster.fname)
})
}
write.csv(gene.tab, row.names=F,
file=paste(fname.root, '.R', i, '.gene_name.csv', sep=''))
}
setwd("/media/audrey/Group Project 2019/Ievgenia ARID1A/Sequencing data/ATAC-seq new script/ngsplot - peak enrichment/control/with merged peaks")
fname <- "control_peak_km.zip"
require(tools)
fname.ext <- file_ext(fname)
fname.root <- file_path_sans_ext(fname)
if(fname.ext == "zip"){
heatmap.dat <- file.path(fname.root, 'heatmap.RData')
load(unz(fname, heatmap.dat))
} else if (fname.ext == "RData") {
load(fname)
} else { # assume zip file missing .zip suffix. maintains compatibility
heatmap.dat <- file.path(fname, 'heatmap.RData')
load(unz(paste(fname, "zip", sep='.'), heatmap.dat))
}
###Step through each gene list
for(i in 1:length(go.list[[1]])){
split.gname.list <- strsplit(go.list[[1]][[i]], ':')
gene.tab <- data.frame(do.call(rbind, split.gname.list))
colnames(gene.tab) <- c("Gene", "Transcript")
if(!is.na(go.list[[2]][i])) { # with cluster info.
gene.tab <- data.frame(gene.tab, Cluster=go.list[[2]][[i]])
gene.cluster.list <- with(gene.tab, split(gene.tab, Cluster, T))
dumb <- sapply(names(gene.cluster.list), function(cluster) {
cluster.fname <- paste(fname.root, '.R', i, '.C', cluster, '.csv',
sep='')
write.csv(gene.cluster.list[[cluster]], row.names=F, file=cluster.fname)
})
}
write.csv(gene.tab, row.names=F,
file=paste(fname.root, '.R', i, '.gene_name.csv', sep=''))
}
setwd("/media/audrey/Group Project 2019/Ievgenia ARID1A/Sequencing data/ATAC-seq new script/ngsplot - peak enrichment/homo/whole genome region")
fname <- "homo_peak.zip"
require(tools)
fname.ext <- file_ext(fname)
fname.root <- file_path_sans_ext(fname)
if(fname.ext == "zip"){
heatmap.dat <- file.path(fname.root, 'heatmap.RData')
load(unz(fname, heatmap.dat))
} else if (fname.ext == "RData") {
load(fname)
} else { # assume zip file missing .zip suffix. maintains compatibility
heatmap.dat <- file.path(fname, 'heatmap.RData')
load(unz(paste(fname, "zip", sep='.'), heatmap.dat))
}
###Step through each gene list
for(i in 1:length(go.list[[1]])){
split.gname.list <- strsplit(go.list[[1]][[i]], ':')
gene.tab <- data.frame(do.call(rbind, split.gname.list))
colnames(gene.tab) <- c("Gene", "Transcript")
if(!is.na(go.list[[2]][i])) { # with cluster info.
gene.tab <- data.frame(gene.tab, Cluster=go.list[[2]][[i]])
gene.cluster.list <- with(gene.tab, split(gene.tab, Cluster, T))
dumb <- sapply(names(gene.cluster.list), function(cluster) {
cluster.fname <- paste(fname.root, '.R', i, '.C', cluster, '.csv',
sep='')
write.csv(gene.cluster.list[[cluster]], row.names=F, file=cluster.fname)
})
}
write.csv(gene.tab, row.names=F,
file=paste(fname.root, '.R', i, '.gene_name.csv', sep=''))
}
setwd("/media/audrey/Group Project 2019/Ievgenia ARID1A/Sequencing data/ATAC-seq new script/ngsplot - peak enrichment/homo/with merged peaks")
fname <- "homo_km.zip"
require(tools)
fname.ext <- file_ext(fname)
fname.root <- file_path_sans_ext(fname)
if(fname.ext == "zip"){
heatmap.dat <- file.path(fname.root, 'heatmap.RData')
load(unz(fname, heatmap.dat))
} else if (fname.ext == "RData") {
load(fname)
} else { # assume zip file missing .zip suffix. maintains compatibility
heatmap.dat <- file.path(fname, 'heatmap.RData')
load(unz(paste(fname, "zip", sep='.'), heatmap.dat))
}
###Step through each gene list
for(i in 1:length(go.list[[1]])){
split.gname.list <- strsplit(go.list[[1]][[i]], ':')
gene.tab <- data.frame(do.call(rbind, split.gname.list))
colnames(gene.tab) <- c("Gene", "Transcript")
if(!is.na(go.list[[2]][i])) { # with cluster info.
gene.tab <- data.frame(gene.tab, Cluster=go.list[[2]][[i]])
gene.cluster.list <- with(gene.tab, split(gene.tab, Cluster, T))
dumb <- sapply(names(gene.cluster.list), function(cluster) {
cluster.fname <- paste(fname.root, '.R', i, '.C', cluster, '.csv',
sep='')
write.csv(gene.cluster.list[[cluster]], row.names=F, file=cluster.fname)
})
}
write.csv(gene.tab, row.names=F,
file=paste(fname.root, '.R', i, '.gene_name.csv', sep=''))
}
fname <- "homo_km.zip"
setwd("/media/audrey/Group Project 2019/Ievgenia ARID1A/Sequencing data/ATAC-seq new script/ngsplot - peak enrichment/homo/whole genome region")
fname <- "homo_km.zip"
require(tools)
fname.ext <- file_ext(fname)
fname.root <- file_path_sans_ext(fname)
if(fname.ext == "zip"){
heatmap.dat <- file.path(fname.root, 'heatmap.RData')
load(unz(fname, heatmap.dat))
} else if (fname.ext == "RData") {
load(fname)
} else { # assume zip file missing .zip suffix. maintains compatibility
heatmap.dat <- file.path(fname, 'heatmap.RData')
load(unz(paste(fname, "zip", sep='.'), heatmap.dat))
}
###Step through each gene list
for(i in 1:length(go.list[[1]])){
split.gname.list <- strsplit(go.list[[1]][[i]], ':')
gene.tab <- data.frame(do.call(rbind, split.gname.list))
colnames(gene.tab) <- c("Gene", "Transcript")
if(!is.na(go.list[[2]][i])) { # with cluster info.
gene.tab <- data.frame(gene.tab, Cluster=go.list[[2]][[i]])
gene.cluster.list <- with(gene.tab, split(gene.tab, Cluster, T))
dumb <- sapply(names(gene.cluster.list), function(cluster) {
cluster.fname <- paste(fname.root, '.R', i, '.C', cluster, '.csv',
sep='')
write.csv(gene.cluster.list[[cluster]], row.names=F, file=cluster.fname)
})
}
write.csv(gene.tab, row.names=F,
file=paste(fname.root, '.R', i, '.gene_name.csv', sep=''))
}
setwd("/media/audrey/Group Project 2019/Ievgenia ARID1A/Sequencing data/ATAC-seq new script/ngsplot - peak enrichment/Extracting clusters/merged peaks/control")
rm(list=ls())
count <- read.delim("count_annot_norm.csv", h=T, sep="\t")
c <- read.delim("control_km.R1.gene_name.csv", h=T, sep=",")
names(c)
mer <- merge(c, count, by.x="Gene", by.y="Gene", all.x=F)
})
mer <- merge(c, count, by.x="Gene", by.y="Gene", all.x=F)
names(mer, "peaks_in_cluster.csv", quote=F, sep="\t", row.names=F, col.names=T)
write.table(mer, "peaks_in_cluster.csv", quote=F, sep="\t", row.names=F, col.names=T)
setwd("/media/audrey/Group Project 2019/Ievgenia ARID1A/Sequencing data/ATAC-seq new script/ngsplot - peak enrichment/Extracting clusters/merged peaks/hetero")
c <- read.delim("batch2017_het_peak_km.R1.gene_name.csv", h=T, sep="\t")
c <- read.delim("batch2017_het_peak_km.R1.gene_name.csv", h=T, sep=",")
mer <- merge(c, count, by.x="Gene", by.y="Gene", all.x=F)
names(c)
names(count)
setwd("~/Desktop/R-coursework/05. Intermediate Plotting")
> x <- rnorm(10,sd=5,mean=20)
x <- rnorm(10,sd=5,mean=20)
y <- 2.5*x - 1.0 + rnorm(10,sd=9,mean=0)
cor(x,y)
plot(x,y,xlab="Independent",ylab="Dependent",main="Random Stuff")
x1 <- runif(8,15,25)
y1 <- 2.5*x1 - 1.0 + runif(8,-6,6)
points(x1,y1,col=2)
plot(x,y,xlab="Independent",ylab="Dependent",main="Random Stuff")
points(x1,y1,col=2,pch=3)
points(x2,y2,col=4,pch=5)
x2 <- runif(8,15,25)
y2 <- 2.5*x2 - 1.0 + runif(8,-6,6)
points(x2,y2,col=3,pch=2)
x2 <- runif(8,15,25)
y2 <- 2.5*x2 - 1.0 + runif(8,-6,6)
points(x2,y2,col=3,pch=2)
dev.off()
x2 <- runif(8,15,25)
y2 <- 2.5*x2 - 1.0 + runif(8,-6,6)
plot(x,y,xlab="Independent",ylab="Dependent",main="Random Stuff")
points(x1,y1,col=2,pch=3)
points(x2,y2,col=4,pch=5)
legend(14,70,c("Original","one","two"),col=c(1,2,4),pch=c(1,3,5))
plot(x,y,xlab="Independent",ylab="Dependent",main="Random Stuff")
xHigh <- x
yHigh <- y + abs(rnorm(10,sd=3.5))
xLow <- x
yLow <- y - abs(rnorm(10,sd=3.1))
arrows(xHigh,yHigh,xLow,yLow,col=2,angle=90,length=0.1,code=3)
par(mfrow=c(2,3))
boxplot(numberWhite,main="first plot")
numberWhite <- rhyper(400,4,5,3)
numberChipped <- rhyper(400,2,7,3)
par(mfrow=c(2,3))
boxplot(numberWhite,main="first plot")
boxplot(numberChipped,main="second plot")
plot(jitter(numberWhite),jitter(numberChipped),xlab="Number White Marbles Drawn",
ylab="Number Chipped Marbles Drawn",main="Pulling Marbles With Jitter")
hist(numberWhite,main="fourth plot")
hist(numberChipped,main="fifth plot")
mosaicplot(table(numberWhite,numberChipped),main="sixth plot")
numberWhite <- rhyper(30,4,5,3)
numberChipped <- rhyper(30,2,7,3)
smoothScatter(numberWhite,numberChipped,
xlab="White Marbles",ylab="Chipped Marbles",main="Drawing Marbles")
numberWhite <- rhyper(30,4,5,3)
numberChipped <- rhyper(30,2,7,3)
smoothScatter(numberWhite,numberChipped,
xlab="White Marbles",ylab="Chipped Marbles",main="Drawing Marbles")
grid(4,3)
uData <- rnorm(20)
vData <- rnorm(20,mean=5)
wData <- uData + 2*vData + rnorm(20,sd=0.5)
xData <- -2*uData+rnorm(20,sd=0.1)
yData <- 3*vData+rnorm(20,sd=2.5)
d <- data.frame(u=uData,v=vData,w=wData,x=xData,y=yData)
pairs(d)
x = c(-1,1,1,-1,-1)
y = c(-1,-1,1,1,-1)
plot(x,y)
polygon(x,y,col='blue')
stdDev <- 0.75;
x <- seq(-5,5,by=0.01)
y <- dnorm(x,sd=stdDev)
right <- qnorm(0.95,sd=stdDev)
plot(x,y,type="l",xaxt="n",ylab="p",
xlab=expression(paste('Assumed Distribution of ',bar(x))),
axes=FALSE,ylim=c(0,max(y)*1.05),xlim=c(min(x),max(x)),
frame.plot=FALSE)
axis(1,at=c(-5,right,0,5),
pos = c(0,0),
labels=c(expression(' '),expression(bar(x)[cr]),expression(mu[0]),expression(' ')))
axis(2)
xReject <- seq(right,5,by=0.01)
yReject <- dnorm(xReject,sd=stdDev)
polygon(c(xReject,xReject[length(xReject)],xReject[1]),
c(yReject,0, 0), col='red')
x <- seq(0,2*pi,by=pi/100)
y <- x
xg <- (x*0+1) %*% t(y)
yg <- (x) %*% t(y*0+1)
f <- sin(xg+yg)
persp(x,y,f,theta=-10,phi=40)
numberWhite <- rhyper(30,4,5,3)
numberChipped <- rhyper(30,2,7,3)
santa <- data.frame(belief=c('no belief','no belief','no belief','no belief',
'belief','belief','belief','belief',
'belief','belief','no belief','no belief',
'belief','belief','no belief','no belief'),
sibling=c('older brother','older brother','older brother','older sister',
'no older sibling','no older sibling','no older sibling','older sister',
'older brother','older sister','older brother','older sister',
'no older sibling','older sister','older brother','no older sibling')
)
santa
summary(santa)
plot(santa$belief)
plot(santa$sibling,santa$belief)
totals = table(santa$belief,santa$sibling)
mosaicplot(totals,main="Older Brothers are Jerks",
xlab="Belief in Santa Claus",ylab="Older Sibling",
col=c(2,3,4))
x = rexp(20,rate=4)
hist(x,ylim=c(0,18),main="This Are An Histogram",xlab="X")
boxplot(x,at=16,horizontal=TRUE,add=TRUE)
rug(x,side=1)
d = density(x)
points(d,type='l',col=3)
dev.new()
dev.new()
dev.new()
dev.list()
dev.set(3)
x = rnorm(20)
hist(x)
dev.set(2)
boxplot(x)
dev.set(4)
qqnorm(x)
qqline(x)
dev.next()
dev.set(dev.next())
plot(density(x))
dev.list()
dev.set(3)
x = rnorm(20)
hist(x)
dev.new()
boxplot(x)
dev.set(4)
dev.new()
boxplot(x)
dev.new()
dev.set(4)
qqnorm(x)
qqline(x)
dev.next()
dev.set(dev.next())
plot(density(x))
dev.new()
dev.set(4)
qqnorm(x)
qqline(x)
dev.next()
dev.set(dev.next())
plot(density(x))
x <- rnorm(10,sd=5,mean=20)
y <- 2.5*x - 1.0 + rnorm(10,sd=9,mean=0)
cor(x,y)
plot(x,y,xlab="Independent",ylab="Dependent",main="Random Stuff")
x1 <- runif(8,15,25)
y1 <- 2.5*x1 - 1.0 + runif(8,-6,6)
points(x1,y1,col=2)
x2 <- runif(8,15,25)
y2 <- 2.5*x2 - 1.0 + runif(8,-6,6)
plot(x,y,xlab="Independent",ylab="Dependent",main="Random Stuff")
points(x1,y1,col=2,pch=3)
points(x2,y2,col=4,pch=5)
legend(14,70,c("Original","one","two"),col=c(1,2,4),pch=c(1,3,5))
plot(x,y,xlab="Independent",ylab="Dependent",main="Random Stuff")
xHigh <- x
yHigh <- y + abs(rnorm(10,sd=3.5))
xLow <- x
yLow <- y - abs(rnorm(10,sd=3.1))
arrows(xHigh,yHigh,xLow,yLow,col=2,angle=90,length=0.1,code=3)
numberWhite <- rhyper(400,4,5,3)
numberChipped <- rhyper(400,2,7,3)
par(mfrow=c(2,3))
boxplot(numberWhite,main="first plot")
boxplot(numberChipped,main="second plot")
plot(jitter(numberWhite),jitter(numberChipped),xlab="Number White Marbles Drawn",
ylab="Number Chipped Marbles Drawn",main="Pulling Marbles With Jitter")
hist(numberWhite,main="fourth plot")
hist(numberChipped,main="fifth plot")
mosaicplot(table(numberWhite,numberChipped),main="sixth plot")
numberWhite <- rhyper(30,4,5,3)
numberChipped <- rhyper(30,2,7,3)
smoothScatter(numberWhite,numberChipped,
xlab="White Marbles",ylab="Chipped Marbles",main="Drawing Marbles")
numberWhite <- rhyper(30,4,5,3)
numberChipped <- rhyper(30,2,7,3)
smoothScatter(numberWhite,numberChipped,
xlab="White Marbles",ylab="Chipped Marbles",main="Drawing Marbles")
grid(4,3)
uData <- rnorm(20)
vData <- rnorm(20,mean=5)
wData <- uData + 2*vData + rnorm(20,sd=0.5)
xData <- -2*uData+rnorm(20,sd=0.1)
yData <- 3*vData+rnorm(20,sd=2.5)
d <- data.frame(u=uData,v=vData,w=wData,x=xData,y=yData)
pairs(d)
x = c(-1,1,1,-1,-1)
y = c(-1,-1,1,1,-1)
plot(x,y)
polygon(x,y,col='blue')
# Set the data
stdDev <- 0.75;
x <- seq(-5,5,by=0.01)
y <- dnorm(x,sd=stdDev)
right <- qnorm(0.95,sd=stdDev)
# Plotting possibility distribution
plot(x,y,type="l",xaxt="n",ylab="p",
xlab=expression(paste('Assumed Distribution of ',bar(x))),
axes=FALSE,ylim=c(0,max(y)*1.05),xlim=c(min(x),max(x)),
frame.plot=FALSE)
# Draw axis separately
axis(1,at=c(-5,right,0,5),
pos = c(0,0),
labels=c(expression(' '),expression(bar(x)[cr]),expression(mu[0]),expression(' ')))
axis(2)
# Add reject region to shade
xReject <- seq(right,5,by=0.01)
yReject <- dnorm(xReject,sd=stdDev)
polygon(c(xReject,xReject[length(xReject)],xReject[1]),
c(yReject,0, 0), col='red')
x <- seq(0,2*pi,by=pi/100)
y <- x
xg <- (x*0+1) %*% t(y)
yg <- (x) %*% t(y*0+1)
f <- sin(xg+yg)
persp(x,y,f,theta=-10,phi=40) #Theta and phi is setting the degree for the surface.
santa <- data.frame(belief=c('no belief','no belief','no belief','no belief',
'belief','belief','belief','belief',
'belief','belief','no belief','no belief',
'belief','belief','no belief','no belief'),
sibling=c('older brother','older brother','older brother','older sister',
'no older sibling','no older sibling','no older sibling','older sister',
'older brother','older sister','older brother','older sister',
'no older sibling','older sister','older brother','no older sibling')
)
santa
summary(santa)
plot(santa$belief)
plot(santa$sibling,santa$belief)
totals = table(santa$belief,santa$sibling)
mosaicplot(totals,main="Older Brothers are Jerks",
xlab="Belief in Santa Claus",ylab="Older Sibling",
col=c(2,3,4))
x = rexp(20,rate=4)
hist(x,ylim=c(0,18),main="This Are An Histogram",xlab="X")
boxplot(x,at=16,horizontal=TRUE,add=TRUE)
rug(x,side=1)
d = density(x)
points(d,type='l',col=3)
dev.new()
dev.list()
dev.set(3)
x = rnorm(20)
hist(x)
dev.set(2)
dev.new()
boxplot(x)
dev.new()
dev.set(4)
qqnorm(x)
qqline(x)
dev.next()
dev.set(dev.next())
plot(density(x))
x = rnorm(100)
hist(x)
dev.print(device=png,width=200,"hist.png")
x = rnorm(100)
hist(x)
dev.print(device=png,width=200,"hist.png")
png(file="hist1.png")
hist(x)
rug(x,side=1)
dev.off()
