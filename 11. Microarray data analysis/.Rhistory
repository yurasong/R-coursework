library(FactoMineR)
library(factoextra)
library(ggplot2)
library(ggfortify)
library(ggrepel)
library(RColorBrewer)
library(gplots)
library(cowplot)
library(affy)
library(htmg430pmcdf)
`source("http://www.bioconductor.org/biocLite.R")`
biocLite("htmg430pmcdf")
BiocManager::install("htmg430pmcdf").
BiocManager::install("htmg430pmcdf")
library(htmg430pmcdf)
library(simpleaffy)
library(affyQCReport)
library("lattice", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.6")
BiocManager::install("affyQCReport")
library("limma", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.6")
library("annotate", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.6")
library(affyQCReport)
install.packages("lattice", .Library)
install.packages("lattice", .Library)
install.packages("lattice", .Library)
install.packages("lattice", .Library)
install.packages("lattice")
library("annotate", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.6")
library(affyQCReport)
celpath <- "Data/celfiles/"
ph = data@phenoData       # sample annotations
celpath <- "Data/celfiles/"
data <- ReadAffy(celfile.path = celpath,
phenoData = "Data/sample_info.txt",
cdfname = "HT_MG-430_PM")
ph = data@phenoData       # sample annotations
ph@data$Sample <- c('ctrlD2.1', 'ctrlD2.2', 'ctrlD2.3',
'AD4.2','AD4.5', 'AD4.6',
'BD1.7', 'BD1.8')
n_samples = length(data)  # number of samples
print(ph)
print(ph@data)
print(n_samples)
print(ph@data)
annotations = read.delim("Data/HT_MG-430_PM.na35.annot.csv", h=T, skip=22, sep=",")
gene_info <- data.frame(cbind(as.character(annotations$Probe.Set.ID),
as.character(annotations$Gene.Symbol),
as.character(annotations$Gene.Title)))
colnames(gene_info)=c("ProbeID", "Symbol", "Description")   # set column names
gene_info$ProbeID <- as.character(gene_info$ProbeID)        # convert columns to character type
gene_info$Symbol <- as.character(gene_info$Symbol)
gene_info$Description <- as.character(gene_info$Description)
row.names(gene_info) <- gene_info$ProbeID                   # set Probe IDs as row names
# reformat data
pmexp = pm(data)   # use only PM data
sampleNames = vector()
logs = vector()
for (i in 1:n_samples){
sampleNames = c(sampleNames, rep(ph@data$Sample[i], dim(pmexp)[1]))
logs = c(logs, log2(pmexp[, i]))
}
logData = data.frame(logInt=logs, sampleName=sampleNames)
# plot with ggplot
dataHist2 = ggplot(logData, aes(logInt, colour = sampleName))
library(FactoMineR)
library(factoextra)
library(ggplot2)
library(ggfortify)
library(ggrepel)
library(RColorBrewer)
library(gplots)
library(cowplot)
# plot with ggplot
dataHist2 = ggplot(logData, aes(logInt, colour = sampleName))
logInt_hist = dataHist2 + geom_density() + ggtitle("PM Intensity histogram before normalization")
logInt_hist
data.rma = rma(data)
data.matrix = exprs(data.rma)           # create data matrix with expression values
colnames(data.matrix) <- ph@data$Sample # assign proper column names
head(data.matrix)
norm_sampleNames = vector()
normLogs = vector()
for (i in 1:n_samples){
norm_sampleNames = c(norm_sampleNames, rep(ph@data$Sample[i], dim(data.matrix)[1]))
normLogs = c(normLogs, data.matrix[, i])
}
normData = data.frame(norm_logInt=normLogs, sampleName=norm_sampleNames)
norm_dataHist2 = ggplot(normData, aes(norm_logInt, colour = sampleName))
norm_logInt_hist = norm_dataHist2 + geom_density() + ggtitle("PM Intensity histogram after normalization")
norm_logInt_hist
# define variables of experiments (combination of "type": ctrl, exp or tpa and "day": 1 or 4) as factors
# same for batch information
conditions <- as.factor(paste(ph@data$Type, ph@data$Day, sep="."))
batches <- as.factor(ph@data$Batch)
# create design matrix using model.matrix() method and the factors defined above
batch_removal_design = model.matrix(~ 0 + conditions)
colnames(batch_removal_design) <- levels(conditions)
# remove batch effect with limma method
batch_removed_data <- removeBatchEffect(data.matrix, batch=batches, design=batch_removal_design)
library(limma)
library(annotate)
# remove batch effect with limma method
batch_removed_data <- removeBatchEffect(data.matrix, batch=batches, design=batch_removal_design)
print(conditions)
print(batches)
print(batch_removal_design)
print(conditions)
print(batches)
print(batch_removal_design)
batch_data <- data.frame(Batch = as.factor(ph@data$Batch), row.names = ph@data$Sample)
print(batch_data)
# calculate PCs
data.pca <- prcomp(t(data.matrix), scale. = TRUE)
# perform k-means clustering with 2 and 3 clusters
k2_preBatch = kmeans(data.pca$x, centers=2)
k3_preBatch = kmeans(data.pca$x, centers=3)
print(summary(data.pca))
# PCA colored by batch
autoplot(data.pca, label=T, label.repel=T, label.size=3,
data=batch_data, colour="Batch", main = "PCA before batch removal")
# PCA colored by batch
autoplot(data.pca, label=T, label.repel=T, label.size=3,
data=batch_data, colour="Batch", main = "PCA before batch removal")
# PCA with k=2 clustering
autoplot(k2_preBatch, data=data.pca$x, label=T, label.repel=T, label.size=3,
main = "Clustered PCA before batch removal, K = 2") +
scale_colour_manual(values = brewer.pal(name="Dark2", n=3))
# PCA with k=3 clustering
autoplot(k3_preBatch, data=data.pca$x, label=T, label.repel=T, label.size=3,
main = "Clustered PCA before batch removal, K = 3") +
scale_colour_manual(values = brewer.pal(name="Dark2", n=3))
# calculate PCs
batch_removed.pca <- prcomp(t(batch_removed_data), scale. = TRUE)
# perform k-means clustering with 2 and 3 clusters
k2_batch_removed = kmeans(batch_removed.pca$x, centers=2)
k3_batch_removed = kmeans(batch_removed.pca$x, centers=3)
print(summary(batch_removed.pca))
# PCA colored by batch
autoplot(batch_removed.pca, label=T, label.repel=T, label.size=3,
data=batch_data, colour="Batch", main = "PCA after batch removal")
# PCA with k=2 clustering
autoplot(k2_batch_removed, data=batch_removed.pca$x, label=T, label.repel=T, label.size=3,
main = "Clustered PCA after batch removal, K = 2") +
scale_colour_manual(values = brewer.pal(name="Dark2", n=3))
# PCA with k=3 clustering
autoplot(k3_batch_removed, data=batch_removed.pca$x, label=T, label.repel=T, label.size=3,
main = "Clustered PCA after batch removal, K = 3") +
scale_colour_manual(values = brewer.pal(name="Dark2", n=3))
fit_design <- model.matrix(~ 0 + conditions + batches)
colnames(fit_design) <- c("Ctrl.4", "Exp.4", "TPA.1", "Batch2", "Batch3")
print(fit_design)
data.fit <- lmFit(data.matrix, fit_design)
## Create contrasts matrix
cont.matrix <- makeContrasts(Exp4_vs_Ctrl4 = Exp.4 - Ctrl.4,
Exp4_vs_TPA = Exp.4 - TPA.1,
TPA_vs_Ctrl4 = TPA.1 - Ctrl.4,
levels = fit_design)
## Make comparisons by doing contrast fit
cont.fit <- contrasts.fit(data.fit, cont.matrix)
## Apply eBayes
cont.fit.eb <- eBayes(cont.fit)
## create tables of ALL genes for each contrast
## set "number" to 1000000 to make sure all genes are selected
Exp4_vs_Ctrl4.table <- topTable(cont.fit.eb, coef=1, number=1000000)
Exp4_vs_TPA.table <- topTable(cont.fit.eb, coef=2, number=1000000)
TPA_vs_Ctrl4.table <- topTable(cont.fit.eb, coef=3, number=1000000)
## Add gene names: Symbol column
Exp4_vs_Ctrl4.table <- transform(merge(Exp4_vs_Ctrl4.table, gene_info[c("ProbeID", "Symbol")],
by.x='row.names', by.y="ProbeID", sort=F),
row.names=Row.names, Row.names=NULL)
Exp4_vs_TPA.table <- transform(merge(Exp4_vs_TPA.table, gene_info[c("ProbeID", "Symbol")],
by.x='row.names', by.y="ProbeID", sort=F),
row.names=Row.names, Row.names=NULL)
TPA_vs_Ctrl4.table <- transform(merge(TPA_vs_Ctrl4.table, gene_info[c("ProbeID", "Symbol")],
by.x='row.names', by.y="ProbeID", sort=F),
row.names=Row.names, Row.names=NULL)
## Create volcano plots with ggplot
volc_plot <- function(top_table, logFC_tresh = 1, p_tresh = 0.05) {
# make volcanoplot for a top_table
name <- deparse(substitute(top_table))
### Highlight genes that have absolute fold change and p-value above or under their thresholds
top_table$threshold <- as.factor(abs(top_table$logFC) > logFC_tresh & top_table$P.Val < p_tresh)
### get the title for the volcanoplot from the table name
name <- sub(".table", "", name)
titl <- paste(gsub("_", " ", name),
paste("|logFC| >", logFC_tresh, sep=" "),
paste("p-value <", p_tresh, sep=" "),
sep=", ")
### make volcanoplot
vlc_plt = ggplot(data=top_table, aes(x=logFC, y=-log10(P.Value), colour=threshold)) +
geom_point(alpha=0.4, size=1.75) +
ggtitle(titl) +
theme(legend.position = "none") +
scale_x_continuous(limits = c(-8, 8), breaks = c(-5, -2, 0, 2, 5)) +
ylim(c(0, 7)) +
xlab("log2 fold change") + ylab("-log10 p-value")
vlc_plt
}
Exp4_vs_Ctrl4.table.vlc_plt <- volc_plot(Exp4_vs_Ctrl4.table, logFC_tresh = 1, p_tresh = 0.05)
Exp4_vs_TPA.table.vlc_plt <- volc_plot(Exp4_vs_TPA.table, logFC_tresh = 1, p_tresh = 0.05)
TPA_vs_Ctrl4.table.vlc_plt <- volc_plot(TPA_vs_Ctrl4.table, logFC_tresh = 1, p_tresh = 0.05)
plot_grid(Exp4_vs_Ctrl4.table.vlc_plt, Exp4_vs_TPA.table.vlc_plt, TPA_vs_Ctrl4.table.vlc_plt, nrow=3)
logFC_thresh = 1
p_thresh = 0.05
AveExpr_thresh = 6
Exp4_vs_Ctrl4.topgenes <- Exp4_vs_Ctrl4.table[which(Exp4_vs_Ctrl4.table$P.Value < p_thresh &
abs(Exp4_vs_Ctrl4.table$logFC) > logFC_thresh &
Exp4_vs_Ctrl4.table$AveExpr > AveExpr_thresh),]
Exp4_vs_TPA.topgenes <- Exp4_vs_TPA.table[which(Exp4_vs_TPA.table$P.Value < p_thresh &
abs(Exp4_vs_TPA.table$logFC) > logFC_thresh &
Exp4_vs_TPA.table$AveExpr > AveExpr_thresh),]
TPA_vs_Ctrl4.topgenes <- TPA_vs_Ctrl4.table[which(TPA_vs_Ctrl4.table$P.Value < p_thresh &
abs(TPA_vs_Ctrl4.table$logFC) > logFC_thresh &
TPA_vs_Ctrl4.table$AveExpr > AveExpr_thresh),]
## Number of genes that are DE, according to the tresholds abs(logFC) > 1, p-value < 0.05
print("Number of genes that are DE, according to the tresholds abs(logFC) > 1, p-value < 0.05")
print("Exp4 vs Ctrl4")
print(nrow(Exp4_vs_Ctrl4.topgenes))
print("Exp4 vs TPA")
print(nrow(Exp4_vs_TPA.topgenes))
print("TPA vs Ctrl4")
print(nrow(TPA_vs_Ctrl4.topgenes))
Exp4_vs_Ctrl4.topups <- Exp4_vs_Ctrl4.topgenes[which(Exp4_vs_Ctrl4.topgenes$logFC > 1),]
Exp4_vs_Ctrl4.topdowns <- Exp4_vs_Ctrl4.topgenes[which(Exp4_vs_Ctrl4.topgenes$logFC < -1),]
Exp4_vs_TPA.topups <- Exp4_vs_TPA.topgenes[which(Exp4_vs_TPA.topgenes$logFC > 1),]
Exp4_vs_TPA.topdowns <- Exp4_vs_TPA.topgenes[which(Exp4_vs_TPA.topgenes$logFC < -1),]
TPA_vs_Ctrl4.topups <- TPA_vs_Ctrl4.topgenes[which(TPA_vs_Ctrl4.topgenes$logFC > 1),]
TPA_vs_Ctrl4.topdowns <- TPA_vs_Ctrl4.topgenes[which(TPA_vs_Ctrl4.topgenes$logFC < -1),]
## Export topgene tables as csv files
# write.csv(Exp4_vs_Ctrl4.topgenes, "Results/Exp4_vs_Ctrl4-topgenes.csv")
# write.csv(Exp4_vs_Ctrl4.topups, "Results/Exp4_vs_Ctrl4-topups.csv")
# write.csv(Exp4_vs_Ctrl4.topdowns, "Results/Exp4_vs_Ctrl4-topdowns.csv")
# write.csv(Exp4_vs_TPA.topgenes, "Results/Exp4_vs_TPA-topgenes.csv")
# write.csv(Exp4_vs_TPA.topups, "Results/Exp4_vs_TPA-topups.csv")
# write.csv(Exp4_vs_TPA.topdowns, "Results/Exp4_vs_TPA-topdowns.csv")
# write.csv(TPA_vs_Ctrl4.topgenes, "Results/TPA_vs_Ctrl4-topgenes.csv")
# write.csv(TPA_vs_Ctrl4.topups, "Results/TPA_vs_Ctrl4-topups.csv")
# write.csv(TPA_vs_Ctrl4.topdowns, "Results/TPA_vs_Ctrl4-topdowns.csv")
Exp4_vs_Ctrl4.topups.IDs <- rownames(Exp4_vs_Ctrl4.topups)
Exp4_vs_Ctrl4.topdowns.IDs <- rownames(Exp4_vs_Ctrl4.topdowns)
Exp4_vs_TPA.topups.IDs <- rownames(Exp4_vs_TPA.topups)
Exp4_vs_TPA.topdowns.IDs <- rownames(Exp4_vs_TPA.topdowns)
TPA_vs_Ctrl4.topups.IDs <- rownames(TPA_vs_Ctrl4.topups)
TPA_vs_Ctrl4.topdowns.IDs <- rownames(TPA_vs_Ctrl4.topdowns)
# export as .txt files
# write.table(Exp4_vs_Ctrl4.topups.IDs, "Results/probeIDs_topups_Exp4_vs_Ctrl4.txt", row.names=F, col.names=F)
# write.table(Exp4_vs_Ctrl4.topdowns.IDs, "Results/probeIDs_topdowns_Exp4_vs_Ctrl4.txt", row.names=F, col.names=F)
# write.table(Exp4_vs_TPA.topups.IDs, "Results/probeIDs_topups_Exp4_vs_TPA.txt", row.names=F, col.names=F)
# write.table(Exp4_vs_TPA.topdowns.IDs, "Results/probeIDs_topdowns_Exp4_vs_TPA.txt", row.names=F, col.names=F)
# write.table(TPA_vs_Ctrl4.topups.IDs, "Results/probeIDs_topups_TPA_vs_Ctrl4.txt", row.names=F, col.names=F)
# write.table(TPA_vs_Ctrl4.topdowns.IDs, "Results/probeIDs_topdowns_TPA_vs_Ctrl4.txt", row.names=F, col.names=F)
common_up_IDs = read.delim("Results/venny_result-COMMON_UP_820-Exp4vsCtrl_TPAvsCtrl.txt",
header = FALSE, skip = 1, colClasses = "character")[, 1]
fit_design <- model.matrix(~ 0 + conditions + batches)
colnames(fit_design) <- c("Ctrl.4", "A.4", "B.1", "Batch2", "Batch3")
print(fit_design)
data.fit <- lmFit(data.matrix, fit_design)
## Create contrasts matrix
cont.matrix <- makeContrasts(A2_vs_Ctrl2 = A.2 - Ctrl.2,
A2_vs_B = A.2 - B.1,
B_vs_Ctrl2 = B.1 - Ctrl.2,
levels = fit_design)
fit_design <- model.matrix(~ 0 + conditions + batches)
colnames(fit_design) <- c("Ctrl.2", "A.2", "B.1", "Batch2", "Batch3")
print(fit_design)
data.fit <- lmFit(data.matrix, fit_design)
## Create contrasts matrix
cont.matrix <- makeContrasts(A2_vs_Ctrl2 = A.2 - Ctrl.2,
A2_vs_B = A.2 - B.1,
B_vs_Ctrl2 = B.1 - Ctrl.2,
levels = fit_design)
## Make comparisons by doing contrast fit
cont.fit <- contrasts.fit(data.fit, cont.matrix)
## Apply eBayes
cont.fit.eb <- eBayes(cont.fit)
rm(list=ls())
celpath <- "Data/celfiles/"
data <- ReadAffy(celfile.path = celpath,
phenoData = "Data/sample_info.txt",
cdfname = "HT_MG-430_PM")
ph = data@phenoData       # sample annotations
ph@data$Sample <- c('ctrlD2.1', 'ctrlD2.2', 'ctrlD2.3',
'AD4.2','AD4.5', 'AD4.6',
'BD1.7', 'BD1.8')
n_samples = length(data)  # number of samples
print(ph@data)
annotations = read.delim("Data/HT_MG-430_PM.na35.annot.csv", h=T, skip=22, sep=",")
gene_info <- data.frame(cbind(as.character(annotations$Probe.Set.ID),
as.character(annotations$Gene.Symbol),
as.character(annotations$Gene.Title)))
colnames(gene_info)=c("ProbeID", "Symbol", "Description")   # set column names
gene_info$ProbeID <- as.character(gene_info$ProbeID)        # convert columns to character type
gene_info$Symbol <- as.character(gene_info$Symbol)
gene_info$Description <- as.character(gene_info$Description)
row.names(gene_info) <- gene_info$ProbeID                   # set Probe IDs as row names
# reformat data
pmexp = pm(data)   # use only PM data
sampleNames = vector()
logs = vector()
for (i in 1:n_samples){
sampleNames = c(sampleNames, rep(ph@data$Sample[i], dim(pmexp)[1]))
logs = c(logs, log2(pmexp[, i]))
}
logData = data.frame(logInt=logs, sampleName=sampleNames)
# plot with ggplot
dataHist2 = ggplot(logData, aes(logInt, colour = sampleName))
logInt_hist = dataHist2 + geom_density() + ggtitle("PM Intensity histogram before normalization")
logInt_hist
data.rma = rma(data)
data.matrix = exprs(data.rma)           # create data matrix with expression values
colnames(data.matrix) <- ph@data$Sample # assign proper column names
head(data.matrix)
norm_sampleNames = vector()
normLogs = vector()
for (i in 1:n_samples){
norm_sampleNames = c(norm_sampleNames, rep(ph@data$Sample[i], dim(data.matrix)[1]))
normLogs = c(normLogs, data.matrix[, i])
}
normData = data.frame(norm_logInt=normLogs, sampleName=norm_sampleNames)
norm_dataHist2 = ggplot(normData, aes(norm_logInt, colour = sampleName))
norm_logInt_hist = norm_dataHist2 + geom_density() + ggtitle("PM Intensity histogram after normalization")
norm_logInt_hist
# define variables of experiments (combination of "type": ctrl, exp or tpa and "day": 1 or 4) as factors
# same for batch information
conditions <- as.factor(paste(ph@data$Type, ph@data$Day, sep="."))
batches <- as.factor(ph@data$Batch)
# create design matrix using model.matrix() method and the factors defined above
batch_removal_design = model.matrix(~ 0 + conditions)
colnames(batch_removal_design) <- levels(conditions)
# remove batch effect with limma method
batch_removed_data <- removeBatchEffect(data.matrix, batch=batches, design=batch_removal_design)
print(conditions)
print(batches)
print(batch_removal_design)
batch_data <- data.frame(Batch = as.factor(ph@data$Batch), row.names = ph@data$Sample)
print(batch_data)
# calculate PCs
data.pca <- prcomp(t(data.matrix), scale. = TRUE)
# perform k-means clustering with 2 and 3 clusters
k2_preBatch = kmeans(data.pca$x, centers=2)
k3_preBatch = kmeans(data.pca$x, centers=3)
print(summary(data.pca))
# PCA colored by batch
autoplot(data.pca, label=T, label.repel=T, label.size=3,
data=batch_data, colour="Batch", main = "PCA before batch removal")
# PCA colored by batch
autoplot(data.pca, label=T, label.repel=T, label.size=3,
data=batch_data, colour="Batch", main = "PCA before batch removal")
# PCA with k=2 clustering
autoplot(k2_preBatch, data=data.pca$x, label=T, label.repel=T, label.size=3,
main = "Clustered PCA before batch removal, K = 2") +
scale_colour_manual(values = brewer.pal(name="Dark2", n=3))
# PCA with k=3 clustering
autoplot(k3_preBatch, data=data.pca$x, label=T, label.repel=T, label.size=3,
main = "Clustered PCA before batch removal, K = 3") +
scale_colour_manual(values = brewer.pal(name="Dark2", n=3))
# PCA colored by batch
autoplot(data.pca, label=T, label.repel=T, label.size=3,
data=batch_data, colour="Batch", main = "PCA before batch removal")
# PCA with k=2 clustering
autoplot(k2_preBatch, data=data.pca$x, label=T, label.repel=T, label.size=3,
main = "Clustered PCA before batch removal, K = 2") +
scale_colour_manual(values = brewer.pal(name="Dark2", n=3))
# PCA with k=3 clustering
autoplot(k3_preBatch, data=data.pca$x, label=T, label.repel=T, label.size=3,
main = "Clustered PCA before batch removal, K = 3") +
scale_colour_manual(values = brewer.pal(name="Dark2", n=3))
# calculate PCs
batch_removed.pca <- prcomp(t(batch_removed_data), scale. = TRUE)
# perform k-means clustering with 2 and 3 clusters
k2_batch_removed = kmeans(batch_removed.pca$x, centers=2)
k3_batch_removed = kmeans(batch_removed.pca$x, centers=3)
print(summary(batch_removed.pca))
# PCA colored by batch
autoplot(batch_removed.pca, label=T, label.repel=T, label.size=3,
data=batch_data, colour="Batch", main = "PCA after batch removal")
# PCA with k=2 clustering
autoplot(k2_batch_removed, data=batch_removed.pca$x, label=T, label.repel=T, label.size=3,
main = "Clustered PCA after batch removal, K = 2") +
scale_colour_manual(values = brewer.pal(name="Dark2", n=3))
# PCA with k=3 clustering
autoplot(k3_batch_removed, data=batch_removed.pca$x, label=T, label.repel=T, label.size=3,
main = "Clustered PCA after batch removal, K = 3") +
scale_colour_manual(values = brewer.pal(name="Dark2", n=3))
fit_design <- model.matrix(~ 0 + conditions + batches)
colnames(fit_design) <- c("Ctrl.2", "A.2", "B.1", "Batch2", "Batch3")
print(fit_design)
data.fit <- lmFit(data.matrix, fit_design)
## Create contrasts matrix
cont.matrix <- makeContrasts(A2_vs_Ctrl2 = A.2 - Ctrl.2,
A2_vs_B = A.2 - B.1,
B_vs_Ctrl2 = B.1 - Ctrl.2,
levels = fit_design)
## Make comparisons by doing contrast fit
cont.fit <- contrasts.fit(data.fit, cont.matrix)
## Apply eBayes
cont.fit.eb <- eBayes(cont.fit)
## create tables of ALL genes for each contrast
## set "number" to 1000000 to make sure all genes are selected
A2_vs_Ctrl2.table <- topTable(cont.fit.eb, coef=1, number=1000000)
A2_vs_B.table <- topTable(cont.fit.eb, coef=2, number=1000000)
B_vs_Ctrl2.table <- topTable(cont.fit.eb, coef=3, number=1000000)
## Add gene names: Symbol column
A2_vs_Ctrl2.table <- transform(merge(A2_vs_Ctrl2.table, gene_info[c("ProbeID", "Symbol")],
by.x='row.names', by.y="ProbeID", sort=F),
row.names=Row.names, Row.names=NULL)
A2_vs_B.table <- transform(merge(A2_vs_B.table, gene_info[c("ProbeID", "Symbol")],
by.x='row.names', by.y="ProbeID", sort=F),
row.names=Row.names, Row.names=NULL)
B_vs_Ctrl2.table <- transform(merge(B_vs_Ctrl2.table, gene_info[c("ProbeID", "Symbol")],
by.x='row.names', by.y="ProbeID", sort=F),
row.names=Row.names, Row.names=NULL)
## Create volcano plots with ggplot
volc_plot <- function(top_table, logFC_tresh = 1, p_tresh = 0.05) {
# make volcanoplot for a top_table
name <- deparse(substitute(top_table))
### Highlight genes that have absolute fold change and p-value above or under their thresholds
top_table$threshold <- as.factor(abs(top_table$logFC) > logFC_tresh & top_table$P.Val < p_tresh)
### get the title for the volcanoplot from the table name
name <- sub(".table", "", name)
titl <- paste(gsub("_", " ", name),
paste("|logFC| >", logFC_tresh, sep=" "),
paste("p-value <", p_tresh, sep=" "),
sep=", ")
### make volcanoplot
vlc_plt = ggplot(data=top_table, aes(x=logFC, y=-log10(P.Value), colour=threshold)) +
geom_point(alpha=0.4, size=1.75) +
ggtitle(titl) +
theme(legend.position = "none") +
scale_x_continuous(limits = c(-8, 8), breaks = c(-5, -2, 0, 2, 5)) +
ylim(c(0, 7)) +
xlab("log2 fold change") + ylab("-log10 p-value")
vlc_plt
}
A2_vs_Ctrl2.table.vlc_plt <- volc_plot(A2_vs_Ctrl2.table, logFC_tresh = 1, p_tresh = 0.05)
A2_vs_B.table.vlc_plt <- volc_plot(A2_vs_B.table, logFC_tresh = 1, p_tresh = 0.05)
B_vs_Ctrl2.table.vlc_plt <- volc_plot(B_vs_Ctrl2.table, logFC_tresh = 1, p_tresh = 0.05)
plot_grid(A2_vs_Ctrl2.table.vlc_plt, A2_vs_B.table.vlc_plt, B_vs_Ctrl2.table.vlc_plt, nrow=3)
logFC_thresh = 1
p_thresh = 0.05
AveExpr_thresh = 6
A2_vs_Ctrl2.topgenes <- A2_vs_Ctrl2.table[which(A2_vs_Ctrl2.table$P.Value < p_thresh &
abs(A2_vs_Ctrl2.table$logFC) > logFC_thresh &
A2_vs_Ctrl2.table$AveExpr > AveExpr_thresh),]
A2_vs_B.topgenes <- A2_vs_B.table[which(A2_vs_B.table$P.Value < p_thresh &
abs(A2_vs_B.table$logFC) > logFC_thresh &
A2_vs_B.table$AveExpr > AveExpr_thresh),]
B_vs_Ctrl2.topgenes <- B_vs_Ctrl2.table[which(B_vs_Ctrl2.table$P.Value < p_thresh &
abs(B_vs_Ctrl2.table$logFC) > logFC_thresh &
B_vs_Ctrl2.table$AveExpr > AveExpr_thresh),]
## Number of genes that are DE, according to the tresholds abs(logFC) > 1, p-value < 0.05
print("Number of genes that are DE, according to the tresholds abs(logFC) > 1, p-value < 0.05")
print("A2 vs Ctrl2")
print(nrow(A2_vs_Ctrl2.topgenes))
print("A2 vs B")
print(nrow(A2_vs_B.topgenes))
print("B vs Ctrl2")
print(nrow(B_vs_Ctrl2.topgenes))
A2_vs_Ctrl2.topups <- A2_vs_Ctrl2.topgenes[which(A2_vs_Ctrl2.topgenes$logFC > 1),]
A2_vs_Ctrl2.topdowns <- A2_vs_Ctrl2.topgenes[which(A2_vs_Ctrl2.topgenes$logFC < -1),]
A2_vs_B.topups <- A2_vs_B.topgenes[which(A2_vs_B.topgenes$logFC > 1),]
A2_vs_B.topdowns <- A2_vs_B.topgenes[which(A2_vs_B.topgenes$logFC < -1),]
B_vs_Ctrl2.topups <- B_vs_Ctrl2.topgenes[which(B_vs_Ctrl2.topgenes$logFC > 1),]
B_vs_Ctrl2.topdowns <- B_vs_Ctrl2.topgenes[which(B_vs_Ctrl2.topgenes$logFC < -1),]
## Export topgene tables as csv files
write.csv(A2_vs_Ctrl2.topgenes, "Results/A2_vs_Ctrl2-topgenes.csv")
write.csv(A2_vs_Ctrl2.topups, "Results/A2_vs_Ctrl2-topups.csv")
write.csv(A2_vs_Ctrl2.topdowns, "Results/A2_vs_Ctrl2-topdowns.csv")
write.csv(A2_vs_B.topgenes, "Results/A2_vs_B-topgenes.csv")
write.csv(A2_vs_B.topups, "Results/A2_vs_B-topups.csv")
write.csv(A2_vs_B.topdowns, "Results/A2_vs_B-topdowns.csv")
write.csv(B_vs_Ctrl2.topgenes, "Results/B_vs_Ctrl2-topgenes.csv")
write.csv(B_vs_Ctrl2.topups, "Results/B_vs_Ctrl2-topups.csv")
write.csv(B_vs_Ctrl2.topdowns, "Results/B_vs_Ctrl2-topdowns.csv")
A2_vs_Ctrl2.topups.IDs <- rownames(A2_vs_Ctrl2.topups)
A2_vs_Ctrl2.topdowns.IDs <- rownames(A2_vs_Ctrl2.topdowns)
A2_vs_B.topups.IDs <- rownames(A2_vs_B.topups)
A2_vs_B.topdowns.IDs <- rownames(A2_vs_B.topdowns)
B_vs_Ctrl2.topups.IDs <- rownames(B_vs_Ctrl2.topups)
B_vs_Ctrl2.topdowns.IDs <- rownames(B_vs_Ctrl2.topdowns)
# export as .txt files
write.table(A2_vs_Ctrl2.topups.IDs, "Results/probeIDs_topups_A2_vs_Ctrl2.txt", row.names=F, col.names=F)
write.table(A2_vs_Ctrl2.topdowns.IDs, "Results/probeIDs_topdowns_A2_vs_Ctrl2.txt", row.names=F, col.names=F)
write.table(A2_vs_B.topups.IDs, "Results/probeIDs_topups_A2_vs_B.txt", row.names=F, col.names=F)
write.table(A2_vs_B.topdowns.IDs, "Results/probeIDs_topdowns_A2_vs_B.txt", row.names=F, col.names=F)
write.table(B_vs_Ctrl2.topups.IDs, "Results/probeIDs_topups_B_vs_Ctrl2.txt", row.names=F, col.names=F)
write.table(B_vs_Ctrl2.topdowns.IDs, "Results/probeIDs_topdowns_B_vs_Ctrl2.txt", row.names=F, col.names=F)
save.image("MA.RData")
savehistory("MA.Rhistory")
