View(enrichList)
View(ctg.tbl)
View(xticks)
View(go.paras)
View(go.list)
View(enrichList)
View(data.frame(enrichList))
View(ctg.tbl)
View(xticks)
View(go.list)
go.list$1
names(go.list)
ctg.tbl$glist[i]
for(i in 1:length(enrichList)) {
reg <- ctg.tbl$glist[i]  # gene list name.
if(galaxy==1){
out.heat <- file.path(oname1, paste('hm', i, '.txt', sep=''))
}else{
out.heat <- file.path(oname, paste('hm', i, '.txt', sep=''))
}
write.table(cbind(coord.list[[reg]][, c('gid', 'gname', 'tid', 'strand')],
enrichList[[i]]),
file=out.heat, row.names=F, sep="\t", quote=F)
}
i
rm(i)
load("~/.cache/.fr-yj73i0/control_peak_km/heatmap.RData")
bfl.res <- bamFileList(ctg.tbl)
setwd("/media/audrey/Group Project 2019/Ievgenia ARID1A/Sequencing data/ATAC-seq new script/ngsplot - peak enrichment/hetero/whole genome region")
help<-function(){
cat("Usage: ExtractGname.R file\n")
cat("Extract gene names and cluster info for ngsplot\n\n")
cat("File can either be the zip file containing the RData file or the RData
file directly.\n")
cat("Output varies depending on input. If input data file has no cluster
information, only one gene_name.txt file produced for each region.\n")
cat("If cluster information present, an additional C*.txt file
produced for each cluster for each region.\n")
q(status=1)
}
fname <- commandArgs(T)
if(length(fname) != 1) {
help()
}
require(tools)
fname.ext <- file_ext(fname)
rm(list=ls())
require(tools)
fname <- commandArgs(T)
if(length(fname) != 1) {
help()
}
require(tools)
fname.ext <- file_ext(fname)
fname.root <- file_path_sans_ext(fname)
if(fname.ext == "zip"){
heatmap.dat <- file.path(fname.root, 'heatmap.RData')
load(unz(fname, heatmap.dat))
} else if (fname.ext == "RData") {
load(fname)
} else { # assume zip file missing .zip suffix. maintains compatibility
heatmap.dat <- file.path(fname, 'heatmap.RData')
load(unz(paste(fname, "zip", sep='.'), heatmap.dat))
}
fname <- "btach2017_het_km"
require(tools)
fname.ext <- file_ext(fname)
fname <- "btach2017_het_km.zip"
fname.ext <- file_ext(fname)
fname.root <- file_path_sans_ext(fname)
if(fname.ext == "zip"){
heatmap.dat <- file.path(fname.root, 'heatmap.RData')
load(unz(fname, heatmap.dat))
} else if (fname.ext == "RData") {
load(fname)
} else { # assume zip file missing .zip suffix. maintains compatibility
heatmap.dat <- file.path(fname, 'heatmap.RData')
load(unz(paste(fname, "zip", sep='.'), heatmap.dat))
}
fname <- "batch2017_het_km.zip"
fname.ext <- file_ext(fname)
fname.root <- file_path_sans_ext(fname)
if(fname.ext == "zip"){
heatmap.dat <- file.path(fname.root, 'heatmap.RData')
load(unz(fname, heatmap.dat))
} else if (fname.ext == "RData") {
load(fname)
} else { # assume zip file missing .zip suffix. maintains compatibility
heatmap.dat <- file.path(fname, 'heatmap.RData')
load(unz(paste(fname, "zip", sep='.'), heatmap.dat))
}
###Step through each gene list
for(i in 1:length(go.list[[1]])){
split.gname.list <- strsplit(go.list[[1]][[i]], ':')
gene.tab <- data.frame(do.call(rbind, split.gname.list))
colnames(gene.tab) <- c("Gene", "Transcript")
if(!is.na(go.list[[2]][i])) { # with cluster info.
gene.tab <- data.frame(gene.tab, Cluster=go.list[[2]][[i]])
gene.cluster.list <- with(gene.tab, split(gene.tab, Cluster, T))
dumb <- sapply(names(gene.cluster.list), function(cluster) {
cluster.fname <- paste(fname.root, '.R', i, '.C', cluster, '.csv',
sep='')
write.csv(gene.cluster.list[[cluster]], row.names=F, file=cluster.fname)
})
}
write.csv(gene.tab, row.names=F,
file=paste(fname.root, '.R', i, '.gene_name.csv', sep=''))
}
setwd("/media/audrey/Group Project 2019/Ievgenia ARID1A/Sequencing data/ATAC-seq new script/ngsplot - peak enrichment/hetero/with merged peaks")
rm(list=ls())
require(tools)
fname <- "batch2017_het_peak.zip"
require(tools)
fname.ext <- file_ext(fname)
fname.root <- file_path_sans_ext(fname)
if(fname.ext == "zip"){
heatmap.dat <- file.path(fname.root, 'heatmap.RData')
load(unz(fname, heatmap.dat))
} else if (fname.ext == "RData") {
load(fname)
} else { # assume zip file missing .zip suffix. maintains compatibility
heatmap.dat <- file.path(fname, 'heatmap.RData')
load(unz(paste(fname, "zip", sep='.'), heatmap.dat))
}
###Step through each gene list
for(i in 1:length(go.list[[1]])){
split.gname.list <- strsplit(go.list[[1]][[i]], ':')
gene.tab <- data.frame(do.call(rbind, split.gname.list))
colnames(gene.tab) <- c("Gene", "Transcript")
if(!is.na(go.list[[2]][i])) { # with cluster info.
gene.tab <- data.frame(gene.tab, Cluster=go.list[[2]][[i]])
gene.cluster.list <- with(gene.tab, split(gene.tab, Cluster, T))
dumb <- sapply(names(gene.cluster.list), function(cluster) {
cluster.fname <- paste(fname.root, '.R', i, '.C', cluster, '.csv',
sep='')
write.csv(gene.cluster.list[[cluster]], row.names=F, file=cluster.fname)
})
}
write.csv(gene.tab, row.names=F,
file=paste(fname.root, '.R', i, '.gene_name.csv', sep=''))
}
fname <- "batch2017_het_peak_km.zip"
fname.ext <- file_ext(fname)
fname.root <- file_path_sans_ext(fname)
if(fname.ext == "zip"){
heatmap.dat <- file.path(fname.root, 'heatmap.RData')
load(unz(fname, heatmap.dat))
} else if (fname.ext == "RData") {
load(fname)
} else { # assume zip file missing .zip suffix. maintains compatibility
heatmap.dat <- file.path(fname, 'heatmap.RData')
load(unz(paste(fname, "zip", sep='.'), heatmap.dat))
}
###Step through each gene list
for(i in 1:length(go.list[[1]])){
split.gname.list <- strsplit(go.list[[1]][[i]], ':')
gene.tab <- data.frame(do.call(rbind, split.gname.list))
colnames(gene.tab) <- c("Gene", "Transcript")
if(!is.na(go.list[[2]][i])) { # with cluster info.
gene.tab <- data.frame(gene.tab, Cluster=go.list[[2]][[i]])
gene.cluster.list <- with(gene.tab, split(gene.tab, Cluster, T))
dumb <- sapply(names(gene.cluster.list), function(cluster) {
cluster.fname <- paste(fname.root, '.R', i, '.C', cluster, '.csv',
sep='')
write.csv(gene.cluster.list[[cluster]], row.names=F, file=cluster.fname)
})
}
write.csv(gene.tab, row.names=F,
file=paste(fname.root, '.R', i, '.gene_name.csv', sep=''))
}
setwd("/media/audrey/Group Project 2019/Ievgenia ARID1A/Sequencing data/ATAC-seq new script/ngsplot - peak enrichment/control/whole genome region")
fname <- "control_km.zip"
require(tools)
fname.ext <- file_ext(fname)
fname.root <- file_path_sans_ext(fname)
if(fname.ext == "zip"){
heatmap.dat <- file.path(fname.root, 'heatmap.RData')
load(unz(fname, heatmap.dat))
} else if (fname.ext == "RData") {
load(fname)
} else { # assume zip file missing .zip suffix. maintains compatibility
heatmap.dat <- file.path(fname, 'heatmap.RData')
load(unz(paste(fname, "zip", sep='.'), heatmap.dat))
}
###Step through each gene list
for(i in 1:length(go.list[[1]])){
split.gname.list <- strsplit(go.list[[1]][[i]], ':')
gene.tab <- data.frame(do.call(rbind, split.gname.list))
colnames(gene.tab) <- c("Gene", "Transcript")
if(!is.na(go.list[[2]][i])) { # with cluster info.
gene.tab <- data.frame(gene.tab, Cluster=go.list[[2]][[i]])
gene.cluster.list <- with(gene.tab, split(gene.tab, Cluster, T))
dumb <- sapply(names(gene.cluster.list), function(cluster) {
cluster.fname <- paste(fname.root, '.R', i, '.C', cluster, '.csv',
sep='')
write.csv(gene.cluster.list[[cluster]], row.names=F, file=cluster.fname)
})
}
write.csv(gene.tab, row.names=F,
file=paste(fname.root, '.R', i, '.gene_name.csv', sep=''))
}
setwd("/media/audrey/Group Project 2019/Ievgenia ARID1A/Sequencing data/ATAC-seq new script/ngsplot - peak enrichment/control/with merged peaks")
fname <- "control_peak_km.zip"
require(tools)
fname.ext <- file_ext(fname)
fname.root <- file_path_sans_ext(fname)
if(fname.ext == "zip"){
heatmap.dat <- file.path(fname.root, 'heatmap.RData')
load(unz(fname, heatmap.dat))
} else if (fname.ext == "RData") {
load(fname)
} else { # assume zip file missing .zip suffix. maintains compatibility
heatmap.dat <- file.path(fname, 'heatmap.RData')
load(unz(paste(fname, "zip", sep='.'), heatmap.dat))
}
###Step through each gene list
for(i in 1:length(go.list[[1]])){
split.gname.list <- strsplit(go.list[[1]][[i]], ':')
gene.tab <- data.frame(do.call(rbind, split.gname.list))
colnames(gene.tab) <- c("Gene", "Transcript")
if(!is.na(go.list[[2]][i])) { # with cluster info.
gene.tab <- data.frame(gene.tab, Cluster=go.list[[2]][[i]])
gene.cluster.list <- with(gene.tab, split(gene.tab, Cluster, T))
dumb <- sapply(names(gene.cluster.list), function(cluster) {
cluster.fname <- paste(fname.root, '.R', i, '.C', cluster, '.csv',
sep='')
write.csv(gene.cluster.list[[cluster]], row.names=F, file=cluster.fname)
})
}
write.csv(gene.tab, row.names=F,
file=paste(fname.root, '.R', i, '.gene_name.csv', sep=''))
}
setwd("/media/audrey/Group Project 2019/Ievgenia ARID1A/Sequencing data/ATAC-seq new script/ngsplot - peak enrichment/homo/whole genome region")
fname <- "homo_peak.zip"
require(tools)
fname.ext <- file_ext(fname)
fname.root <- file_path_sans_ext(fname)
if(fname.ext == "zip"){
heatmap.dat <- file.path(fname.root, 'heatmap.RData')
load(unz(fname, heatmap.dat))
} else if (fname.ext == "RData") {
load(fname)
} else { # assume zip file missing .zip suffix. maintains compatibility
heatmap.dat <- file.path(fname, 'heatmap.RData')
load(unz(paste(fname, "zip", sep='.'), heatmap.dat))
}
###Step through each gene list
for(i in 1:length(go.list[[1]])){
split.gname.list <- strsplit(go.list[[1]][[i]], ':')
gene.tab <- data.frame(do.call(rbind, split.gname.list))
colnames(gene.tab) <- c("Gene", "Transcript")
if(!is.na(go.list[[2]][i])) { # with cluster info.
gene.tab <- data.frame(gene.tab, Cluster=go.list[[2]][[i]])
gene.cluster.list <- with(gene.tab, split(gene.tab, Cluster, T))
dumb <- sapply(names(gene.cluster.list), function(cluster) {
cluster.fname <- paste(fname.root, '.R', i, '.C', cluster, '.csv',
sep='')
write.csv(gene.cluster.list[[cluster]], row.names=F, file=cluster.fname)
})
}
write.csv(gene.tab, row.names=F,
file=paste(fname.root, '.R', i, '.gene_name.csv', sep=''))
}
setwd("/media/audrey/Group Project 2019/Ievgenia ARID1A/Sequencing data/ATAC-seq new script/ngsplot - peak enrichment/homo/with merged peaks")
fname <- "homo_km.zip"
require(tools)
fname.ext <- file_ext(fname)
fname.root <- file_path_sans_ext(fname)
if(fname.ext == "zip"){
heatmap.dat <- file.path(fname.root, 'heatmap.RData')
load(unz(fname, heatmap.dat))
} else if (fname.ext == "RData") {
load(fname)
} else { # assume zip file missing .zip suffix. maintains compatibility
heatmap.dat <- file.path(fname, 'heatmap.RData')
load(unz(paste(fname, "zip", sep='.'), heatmap.dat))
}
###Step through each gene list
for(i in 1:length(go.list[[1]])){
split.gname.list <- strsplit(go.list[[1]][[i]], ':')
gene.tab <- data.frame(do.call(rbind, split.gname.list))
colnames(gene.tab) <- c("Gene", "Transcript")
if(!is.na(go.list[[2]][i])) { # with cluster info.
gene.tab <- data.frame(gene.tab, Cluster=go.list[[2]][[i]])
gene.cluster.list <- with(gene.tab, split(gene.tab, Cluster, T))
dumb <- sapply(names(gene.cluster.list), function(cluster) {
cluster.fname <- paste(fname.root, '.R', i, '.C', cluster, '.csv',
sep='')
write.csv(gene.cluster.list[[cluster]], row.names=F, file=cluster.fname)
})
}
write.csv(gene.tab, row.names=F,
file=paste(fname.root, '.R', i, '.gene_name.csv', sep=''))
}
fname <- "homo_km.zip"
setwd("/media/audrey/Group Project 2019/Ievgenia ARID1A/Sequencing data/ATAC-seq new script/ngsplot - peak enrichment/homo/whole genome region")
fname <- "homo_km.zip"
require(tools)
fname.ext <- file_ext(fname)
fname.root <- file_path_sans_ext(fname)
if(fname.ext == "zip"){
heatmap.dat <- file.path(fname.root, 'heatmap.RData')
load(unz(fname, heatmap.dat))
} else if (fname.ext == "RData") {
load(fname)
} else { # assume zip file missing .zip suffix. maintains compatibility
heatmap.dat <- file.path(fname, 'heatmap.RData')
load(unz(paste(fname, "zip", sep='.'), heatmap.dat))
}
###Step through each gene list
for(i in 1:length(go.list[[1]])){
split.gname.list <- strsplit(go.list[[1]][[i]], ':')
gene.tab <- data.frame(do.call(rbind, split.gname.list))
colnames(gene.tab) <- c("Gene", "Transcript")
if(!is.na(go.list[[2]][i])) { # with cluster info.
gene.tab <- data.frame(gene.tab, Cluster=go.list[[2]][[i]])
gene.cluster.list <- with(gene.tab, split(gene.tab, Cluster, T))
dumb <- sapply(names(gene.cluster.list), function(cluster) {
cluster.fname <- paste(fname.root, '.R', i, '.C', cluster, '.csv',
sep='')
write.csv(gene.cluster.list[[cluster]], row.names=F, file=cluster.fname)
})
}
write.csv(gene.tab, row.names=F,
file=paste(fname.root, '.R', i, '.gene_name.csv', sep=''))
}
setwd("/media/audrey/Group Project 2019/Ievgenia ARID1A/Sequencing data/ATAC-seq new script/ngsplot - peak enrichment/Extracting clusters/merged peaks/control")
rm(list=ls())
count <- read.delim("count_annot_norm.csv", h=T, sep="\t")
c <- read.delim("control_km.R1.gene_name.csv", h=T, sep=",")
names(c)
mer <- merge(c, count, by.x="Gene", by.y="Gene", all.x=F)
})
mer <- merge(c, count, by.x="Gene", by.y="Gene", all.x=F)
names(mer, "peaks_in_cluster.csv", quote=F, sep="\t", row.names=F, col.names=T)
write.table(mer, "peaks_in_cluster.csv", quote=F, sep="\t", row.names=F, col.names=T)
setwd("/media/audrey/Group Project 2019/Ievgenia ARID1A/Sequencing data/ATAC-seq new script/ngsplot - peak enrichment/Extracting clusters/merged peaks/hetero")
c <- read.delim("batch2017_het_peak_km.R1.gene_name.csv", h=T, sep="\t")
c <- read.delim("batch2017_het_peak_km.R1.gene_name.csv", h=T, sep=",")
mer <- merge(c, count, by.x="Gene", by.y="Gene", all.x=F)
names(c)
names(count)
setwd("~/Desktop/R-coursework/08. Convert the gene ID")
convertHumanGeneList <- function(x){
require("biomaRt")
human = useMart("ensembl", dataset = "hsapiens_gene_ensembl")
mouse = useMart("ensembl", dataset = "mmusculus_gene_ensembl")
genesV2 = getLDS(attributes = c("hgnc_symbol"), filters = "hgnc_symbol", values = x , mart = human, attributesL = c("mgi_symbol"),
martL = mouse, uniqueRows=T)
mousex <- unique(genesV2[, 2])
# Print the first 6 genes found to the screen
print(head(mousex))
return(mousex)
}
gene_mouse <- convertHumanGeneList(humGenes)
humGenes <- c("DBT", "COP1", "PRUNE1", "ICMT", "PINK1", "KHDRBS1", "NUDC", "PUM1", "THRAP3", "GPBP1L1", "RNF220", "TCEANC2", "FAF1", "PIGK", "GCLM", "RAP1A", "WDR3", "SMG5", "ACBD6")
convertHumanGeneList <- function(x){
require("biomaRt")
human = useMart("ensembl", dataset = "hsapiens_gene_ensembl")
mouse = useMart("ensembl", dataset = "mmusculus_gene_ensembl")
genesV2 = getLDS(attributes = c("hgnc_symbol"), filters = "hgnc_symbol", values = x , mart = human, attributesL = c("mgi_symbol"),
martL = mouse, uniqueRows=T)
mousex <- unique(genesV2[, 2])
# Print the first 6 genes found to the screen
print(head(mousex))
return(mousex)
}
gene_mouse <- convertHumanGeneList(humGenes)
